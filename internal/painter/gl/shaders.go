// auto-generated
// Code generated by '$ fyne bundle'. DO NOT EDIT.

package gl

import "fyne.io/fyne/v2"

var shaderLineFrag = &fyne.StaticResource{
	StaticName: "line.frag",
	StaticContent: []byte(
		"#version 110\n\nuniform vec4 color;\nuniform float lineWidth;\nuniform float feather;\n\nvarying vec2 delta;\n\nvoid main() {\n    float alpha = color.a;\n    float distance = length(delta);\n\n    if (feather == 0.0 || distance <= lineWidth - feather) {\n        gl_FragColor = color;\n    } else {\n        gl_FragColor = vec4(color.r, color.g, color.b, mix(color.a, 0.0, (distance - (lineWidth - feather)) / feather));\n    }\n}\n"),
}
var shaderLineVert = &fyne.StaticResource{
	StaticName: "line.vert",
	StaticContent: []byte(
		"#version 110\n\nattribute vec2 vert;\nattribute vec2 normal;\n    \nuniform float lineWidth;\n\nvarying vec2 delta;\n\nvoid main() {\n    delta = normal * lineWidth;\n\n    gl_Position = vec4(vert + delta, 0, 1);\n}\n"),
}
var shaderLineesFrag = &fyne.StaticResource{
	StaticName: "line_es.frag",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nuniform vec4 color;\nuniform float lineWidth;\nuniform float feather;\n\nvarying vec2 delta;\n\nvoid main() {\n    float alpha = color.a;\n    float distance = length(delta);\n\n    if (feather == 0.0 || distance <= lineWidth - feather) {\n        gl_FragColor = color;\n    } else {\n        gl_FragColor = vec4(color.r, color.g, color.b, mix(color.a, 0.0, (distance - (lineWidth - feather)) / feather));\n    }\n}\n"),
}
var shaderLineesVert = &fyne.StaticResource{
	StaticName: "line_es.vert",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nattribute vec2 vert;\nattribute vec2 normal;\n    \nuniform float lineWidth;\n\nvarying vec2 delta;\n\nvoid main() {\n    delta = normal * lineWidth;\n\n    gl_Position = vec4(vert + delta, 0, 1);\n}\n"),
}
var shaderSimpleFrag = &fyne.StaticResource{
	StaticName: "simple.frag",
	StaticContent: []byte(
		"#version 110\n\nuniform sampler2D tex;\n\nvarying vec2 fragTexCoord;\n\nvoid main() {\n    gl_FragColor = texture2D(tex, fragTexCoord);\n}\n"),
}
var shaderSimpleVert = &fyne.StaticResource{
	StaticName: "simple.vert",
	StaticContent: []byte(
		"#version 110\n\nattribute vec3 vert;\nattribute vec2 vertTexCoord;\nvarying vec2 fragTexCoord;\n\nvoid main() {\n    fragTexCoord = vertTexCoord;\n\n    gl_Position = vec4(vert, 1);\n}"),
}
var shaderSimpleesFrag = &fyne.StaticResource{
	StaticName: "simple_es.frag",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nuniform sampler2D tex;\n\nvarying vec2 fragTexCoord;\n\nvoid main() {\n    gl_FragColor = texture2D(tex, fragTexCoord);\n}\n"),
}
var shaderSimpleesVert = &fyne.StaticResource{
	StaticName: "simple_es.vert",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nattribute vec3 vert;\nattribute vec2 vertTexCoord;\nvarying vec2 fragTexCoord;\n\nvoid main() {\n    fragTexCoord = vertTexCoord;\n\n    gl_Position = vec4(vert, 1);\n}"),
}
var shaderRectangleFrag = &fyne.StaticResource{
	StaticName: "rectangle.frag",
	StaticContent: []byte(
		"#version 110\r\n\r\nuniform vec4 rect_coords; //x1 [0], x2 [1], y1 [2], y2 [3]; coords of the rect_frame\r\nuniform float stroke;\r\nuniform float radius;\r\nuniform vec4 fill_color;\r\nuniform vec4 stroke_color;\r\nvarying vec2 frame_resolution;\r\n\r\n\r\nfloat RectSDF(vec2 p, vec2 b, float r)\r\n{\r\n    vec2 d = abs(p) - b + vec2(r);\r\n\treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - r;   \r\n}\r\n\r\nvoid main() {\r\n\r\n    if ( radius == 0.0 ){\r\n        vec4 color = fill_color;\r\n        \r\n        if (gl_FragCoord.x >= rect_coords[1] - stroke ){\r\n            color = stroke_color;\r\n        } else if (gl_FragCoord.x <= rect_coords[0] + stroke){\r\n            color = stroke_color;\r\n        } else if (gl_FragCoord.y <= frame_resolution.y - rect_coords[3] + stroke ){\r\n            color = stroke_color;\r\n        } else if (gl_FragCoord.y >= frame_resolution.y - rect_coords[2] - stroke ){\r\n            color = stroke_color;\r\n        }\r\n\r\n        gl_FragColor = color;\r\n\r\n    } else {\r\n        vec4 norm_coords = vec4(rect_coords[0], rect_coords[1], frame_resolution.y - rect_coords[3], frame_resolution.y - rect_coords[2]);\r\n        float u_fHalfBorderThickness = stroke / 2.0;\r\n        vec2 u_v2HalfShapeSizePx =  vec2(norm_coords[1] - norm_coords[0], norm_coords[3] - norm_coords[2]) / 2.0 - vec2(u_fHalfBorderThickness);\r\n        vec2 v_v2CenteredPos = (gl_FragCoord.xy - vec2(norm_coords[0] + norm_coords[1], norm_coords[2] + norm_coords[3]) / 2.0);\r\n\r\n        float fDist = RectSDF(v_v2CenteredPos, u_v2HalfShapeSizePx, radius - u_fHalfBorderThickness);\r\n    \r\n        vec4 v4FromColor = stroke_color; //Always the border color. If no border, this still should be set\r\n        vec4 v4ToColor = vec4(0.0, 0.0, 0.0, 0.0); //Outside color\r\n    \r\n        if (u_fHalfBorderThickness > 0.0)\r\n        {\r\n            if (fDist < 0.0)\r\n            {\r\n                v4ToColor = fill_color;   \r\n            } \r\n            \r\n            fDist = abs(fDist) - u_fHalfBorderThickness;\r\n        }\r\n    \r\n        float fBlendAmount = smoothstep(-1.0, 1.0, fDist);\r\n    \r\n        // final color\r\n        gl_FragColor = mix(v4FromColor, v4ToColor, fBlendAmount);\r\n        //gl_FragColor = vec4(vec3(fBlendAmount), 1.0);\r\n        //gl_FragColor = vec4(vec3(abs(dist) / (2.0 * corner)), 1.0);\r\n    }\r\n\r\n}\r\n"),
}
var shaderRectangleVert = &fyne.StaticResource{
	StaticName: "rectangle.vert",
	StaticContent: []byte(
		"#version 110\r\n\r\nattribute vec2 vert;\r\nattribute vec2 normal;\r\n\r\nuniform vec4 frame_size; //size of view/window; only x,y used (z,w not); \r\nvarying vec2 frame_resolution;\r\n\r\nvoid main() {\r\n    frame_resolution = vec2(frame_size.x, frame_size.y);\r\n\r\n    gl_Position = vec4(2.0*vert.x/frame_size.x - 1.0, 1.0 - 2.0*vert.y/frame_size.y, 0, 1);\r\n    // gl_Position = vec4(vert, 0, 1);\r\n\r\n}\r\n"),
}
var shaderRectangleesFrag = &fyne.StaticResource{
	StaticName: "rectangle_es.frag",
	StaticContent: []byte(
		"#version 110\r\n\r\nuniform vec4 rect_coords; //x1 [0], x2 [1], y1 [2], y2 [3]; coords of the rect_frame\r\nuniform float stroke;\r\nuniform float radius;\r\nuniform vec4 fill_color;\r\nuniform vec4 stroke_color;\r\nvarying vec2 frame_resolution;\r\n\r\n\r\nfloat RectSDF(vec2 p, vec2 b, float r)\r\n{\r\n    vec2 d = abs(p) - b + vec2(r);\r\n\treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - r;   \r\n}\r\n\r\nvoid main() {\r\n\r\n    if ( radius == 0.0 ){\r\n        vec4 color = fill_color;\r\n        \r\n        if (gl_FragCoord.x >= rect_coords[1] - stroke ){\r\n            color = stroke_color;\r\n        } else if (gl_FragCoord.x <= rect_coords[0] + stroke){\r\n            color = stroke_color;\r\n        } else if (gl_FragCoord.y <= frame_resolution.y - rect_coords[3] + stroke ){\r\n            color = stroke_color;\r\n        } else if (gl_FragCoord.y >= frame_resolution.y - rect_coords[2] - stroke ){\r\n            color = stroke_color;\r\n        }\r\n\r\n        gl_FragColor = color;\r\n\r\n    } else {\r\n        float u_fHalfBorderThickness = stroke / 2.0;\r\n        vec2 u_v2HalfShapeSizePx =  vec2(rect_coords[1] - rect_coords[0], rect_coords[2] - rect_coords[3]) / 2.0 - vec2(u_fHalfBorderThickness);\r\n        vec2 v_v2CenteredPos = (gl_FragCoord.xy - ( vec2(rect_coords[1] - rect_coords[0], rect_coords[2] - rect_coords[3]) / 2.0);\r\n\r\n        float fDist = RectSDF(v_v2CenteredPos, u_v2HalfShapeSizePx, radius - u_fHalfBorderThickness);\r\n    \r\n        vec4 v4FromColor = stroke_color; //Always the border color. If no border, this still should be set\r\n        vec4 v4ToColor = vec4(0.0, 0.0, 0.0, 0.0); //Outside color\r\n    \r\n        if (u_fHalfBorderThickness > 0.0)\r\n        {\r\n            if (fDist < 0.0)\r\n            {\r\n                v4ToColor = fill_color;   \r\n            } \r\n            \r\n            fDist = abs(fDist) - u_fHalfBorderThickness;\r\n        }\r\n    \r\n        float fBlendAmount = smoothstep(-1.0, 1.0, fDist);\r\n    \r\n        // final color\r\n        gl_FragColor = mix(v4FromColor, v4ToColor, fBlendAmount);\r\n        //gl_FragColor = vec4(vec3(fBlendAmount), 1.0);\r\n        //gl_FragColor = vec4(vec3(abs(dist) / (2.0 * corner)), 1.0);\r\n    }\r\n\r\n}\r\n"),
}
var shaderRectangleesVert = &fyne.StaticResource{
	StaticName: "rectangle_es.vert",
	StaticContent: []byte(
		"#version 100\n\n#ifdef GL_ES\n# ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n# else\nprecision mediump float;\n#endif\nprecision mediump int;\nprecision lowp sampler2D;\n#endif\n\nattribute vec2 vert;\nattribute vec2 normal;\nattribute float colorSwitch;\nattribute float lineWidth;\nattribute float feather;\n\nvarying vec2 delta;\nvarying float switch_var;\nvarying float lineWidth_var;\nvarying float feather_var;\n\nvoid main() {\n    switch_var = colorSwitch;\n    lineWidth_var = lineWidth;\n    feather_var = feather;\n    if ( normal == vec2(0.0, 0.0) ) {\n        gl_Position = vec4(vert, 0, 1);\n    } else {\n        delta = normal * lineWidth_var;\n        gl_Position = vec4(vert + delta, 0, 1);\n    }\n}"),
}
